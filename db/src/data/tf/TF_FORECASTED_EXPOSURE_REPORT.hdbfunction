FUNCTION "TF_FORECASTED_EXPOSURE_REPORT"
( 
    IN IP_MODEL            NVARCHAR(1),
    IN IP_LAYER1_MIN_PER   INTEGER, 
    IN IP_LAYER1_MAX_PER   INTEGER, 
    IN IP_LAYER2_MIN_PER   INTEGER, 
    IN IP_LAYER2_MAX_PER   INTEGER, 
    IN IP_LAYER_KEY        NVARCHAR(6),
    IN IP_START_MONTH      INTEGER,
    IN IP_YEAR             INTEGER,
    IN IP_EXP_CURRENCY     NVARCHAR(3)
)
    RETURNS TABLE ( HEDGE_YEAR INTEGER,
                    HEDGE_MONTH INTEGER,
                    FORWARD_SETTLE_YEAR INT,
                    FORWARD_SETTLE_MONTH INT,
                    LAYER1_PERCENTAGE NVARCHAR(7),
                    LAYER2_PERCENTAGE NVARCHAR(7),
                    LAYER_SEQUENCE NVARCHAR(2),
                    FORECAST DECIMAL,
                    MIN_VALUE DECIMAL,
                    MAX_VALUE DECIMAL,
                    BPL_PER DECIMAL,
                    FORECAST_COMP_PER DECIMAL,
                    MKT_VAL_RATIO_PER DECIMAL,
                    PROPOSED_PERCENT DECIMAL,
                    PROPOSED_VALUE DECIMAL
                  )
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER AS
BEGIN
    /*****************************
        Write your function logic
    ****************************/
    DECLARE I INT;
    DECLARE J INT;
    DECLARE V_YEAR INT;
    DECLARE V_YEAR_INC NVARCHAR(1);

    T_LAYER_DATA = SELECT *,
                        CASE
                            WHEN BLOCK_KEY = RECORD_KEY
                            AND (END_MONTH < START_MONTH) THEN :IP_YEAR + 1
                            WHEN BLOCK_KEY != RECORD_KEY
                            AND :IP_YEAR < QUOTE_YEAR THEN QUOTE_YEAR
                            WHEN BLOCK_KEY != RECORD_KEY
                            AND (:IP_YEAR = QUOTE_YEAR)
                            AND (END_MONTH < START_MONTH) THEN QUOTE_YEAR + 1
                            ELSE :IP_YEAR
                        END AS SPOT_YEAR
                    FROM (
                            SELECT LAYER_KEY,
                                BLOCK_KEY,
                                RECORD_KEY,
                                DURATION,
                                CASE
                                    WHEN BLOCK_KEY = RECORD_KEY THEN 'L1'
                                    ELSE 'L2'
                                END AS LAYER_SEQUENCE,
                                START_MONTH,
                                END_MONTH,
                                CASE
                                    WHEN (BLOCK_KEY != RECORD_KEY)
                                    AND DURATION + TO_INTEGER(SUBSTRING(BLOCK_KEY, 1, 2)) > 12 THEN :IP_YEAR + 1
                                    ELSE :IP_YEAR
                                END AS QUOTE_YEAR
                            FROM T_LAYER_OVERLAP_ROLLING_COMBO
                            WHERE LAYER_KEY = :IP_LAYER_KEY
                                AND LAYER = 2
                        );

        T_DATA_FORMAT = SELECT :IP_LAYER_KEY AS LAYER_KEY, :IP_YEAR AS HEDGE_YEAR, :IP_START_MONTH AS HEDGE_MONTH
                        FROM "SY_DUMMY";

        J = :IP_START_MONTH;
        I = 1;
        V_YEAR = :IP_YEAR;
        WHILE I < 12 DO

            J = :J + 1;
            IF :J > 12 THEN 
                J = 1;
                V_YEAR_INC = 'X';
                V_YEAR = :V_YEAR + 1;
            END IF;

                        
            T_DATA_FORMAT = SELECT * FROM :T_DATA_FORMAT
                            UNION 
                         SELECT :IP_LAYER_KEY AS LAYER_KEY, :V_YEAR AS HEDGE_YEAR , :J AS HEDGE_MONTH
                            FROM "SY_DUMMY"; 
            I = :I + 1;
        END WHILE;

        T_DATA = SELECT A.*, B.SPOT_YEAR AS HEDGE_MATURITY_YEAR, B.END_MONTH AS HEDGE_MATURITY_MONTH,
                        B.LAYER_SEQUENCE
                    FROM :T_DATA_FORMAT AS A 
                    LEFT OUTER JOIN :T_LAYER_DATA AS B
                    ON A.HEDGE_YEAR = B.QUOTE_YEAR
                    AND A.HEDGE_MONTH = B.START_MONTH;

        T_LAYER_KEYS = SELECT DISTINCT LAYER_KEY FROM T_LAYER_OVERLAP_ROLLING_COMBO WHERE LAYER_KEY = :IP_LAYER_KEY;
        
        T_LAYER_PNL = SELECT LAYER_KEY, LAYER_SEQ, AVG(PNL) AS AVG_PNL FROM ( SELECT
                        "LAYER_KEY",
                        "PNL",
                        CASE WHEN RECORD_KEY = BLOCK_KEY THEN  'L1'
                        ELSE 'L2' END AS LAYER_SEQ
                    FROM "CV_LAYER_PNL_OVERLAP_ROLLING" WHERE LAYER_KEY = :IP_LAYER_KEY )
                    GROUP BY LAYER_KEY, LAYER_SEQ;

        T_BEST_LAYER = SELECT A."LAYER_KEY", B.AVG_PNL AS L1_PNL, C.AVG_PNL AS L2_PNL,
                        CASE WHEN B.AVG_PNL > C.AVG_PNL THEN 'L1'
                             WHEN B.AVG_PNL < C.AVG_PNL THEN 'L2'
                             ELSE 'L1_L2'
                        END AS BEST_LAYER
                        FROM :T_LAYER_KEYS AS A
                        LEFT OUTER JOIN :T_LAYER_PNL AS B
                        ON A.LAYER_KEY = B.LAYER_KEY
                        AND B.LAYER_SEQ = 'L1'
                        LEFT OUTER JOIN :T_LAYER_PNL AS C
                        ON A.LAYER_KEY = C.LAYER_KEY
                        AND C.LAYER_SEQ = 'L2';

        IF :IP_MODEL = 'R' THEN

            T_OUT_CALC = SELECT DISTINCT A.*, B.FORECASTED AS FORECAST,
                            CASE WHEN A.LAYER_SEQUENCE = 'L1' THEN ( :IP_LAYER1_MIN_PER / 100 ) * B.FORECASTED
                                 WHEN A.LAYER_SEQUENCE = 'L2' THEN ( :IP_LAYER2_MIN_PER / 100 ) * B.FORECASTED   
                            END AS MIN_VALUE,
                            CASE WHEN A.LAYER_SEQUENCE = 'L1' THEN ( :IP_LAYER1_MAX_PER / 100 ) * B.FORECASTED
                                 WHEN A.LAYER_SEQUENCE = 'L2' THEN ( :IP_LAYER2_MAX_PER / 100 ) * B.FORECASTED   
                            END AS MAX_VALUE, 
                            CASE WHEN A.LAYER_SEQUENCE = 'L1' AND ( C.BEST_LAYER = 'L1' OR C.BEST_LAYER = 'L1_L2')  THEN :IP_LAYER1_MAX_PER
                                 WHEN A.LAYER_SEQUENCE = 'L1' AND C.BEST_LAYER = 'L2' THEN :IP_LAYER1_MIN_PER
                                 WHEN A.LAYER_SEQUENCE = 'L2' AND ( C.BEST_LAYER = 'L2' OR C.BEST_LAYER = 'L1_L2') THEN :IP_LAYER2_MAX_PER
                                 WHEN A.LAYER_SEQUENCE = 'L2' AND C.BEST_LAYER = 'L1' THEN :IP_LAYER2_MIN_PER
                            END AS BPL,
                            CASE WHEN B.FORECASTED <= B.ACTUAL AND A.LAYER_SEQUENCE = 'L1' THEN :IP_LAYER1_MAX_PER
                                 WHEN B.FORECASTED <= B.ACTUAL AND A.LAYER_SEQUENCE = 'L2' THEN :IP_LAYER2_MAX_PER
                                 WHEN B.FORECASTED > B.ACTUAL AND A.LAYER_SEQUENCE = 'L1' THEN :IP_LAYER1_MIN_PER
                                 WHEN B.FORECASTED > B.ACTUAL AND A.LAYER_SEQUENCE = 'L2' THEN :IP_LAYER1_MIN_PER
                            END AS FORECAST_COMP,
                            CASE WHEN E.AVG_SPOT_RATE <= D.AVG_SPOT_RATE AND A.LAYER_SEQUENCE = 'L1' THEN :IP_LAYER1_MIN_PER
                                 WHEN E.AVG_SPOT_RATE <= D.AVG_SPOT_RATE AND A.LAYER_SEQUENCE = 'L2' THEN :IP_LAYER2_MIN_PER
                                 WHEN E.AVG_SPOT_RATE > D.AVG_SPOT_RATE AND A.LAYER_SEQUENCE = 'L1' THEN :IP_LAYER1_MAX_PER
                                 WHEN E.AVG_SPOT_RATE > D.AVG_SPOT_RATE AND A.LAYER_SEQUENCE = 'L2' THEN :IP_LAYER2_MAX_PER
                                 WHEN A.LAYER_SEQUENCE = 'L1' THEN :IP_LAYER1_MIN_PER
                                 WHEN A.LAYER_SEQUENCE = 'L2' THEN :IP_LAYER2_MIN_PER
                            END AS MKT_VAL_RATIO
                            FROM :T_DATA AS A
                            LEFT OUTER JOIN "TF_EXPOSURE_FORECAST_RATIO"(:IP_EXP_CURRENCY) AS B
                            ON A.HEDGE_MATURITY_YEAR = B.PLANNING_YEAR
                            AND A.HEDGE_MATURITY_MONTH = B.PERIOD
                            LEFT OUTER JOIN :T_BEST_LAYER AS C
                            ON A.LAYER_KEY = C.LAYER_KEY
                            LEFT OUTER JOIN T_SPOT_RATES_FORECAST AS D
                            ON A.HEDGE_MATURITY_YEAR = D.YEAR
                            AND A.HEDGE_MATURITY_MONTH = D.MONTH
                            AND D.TENOR = 0
                            LEFT OUTER JOIN T_SPOT_RATES AS E
                            ON A.HEDGE_YEAR = E.YEAR
                            AND A.HEDGE_MONTH = E.MONTH
                            AND A.HEDGE_MATURITY_MONTH = D.TENOR;  

            T_OUTPUT = SELECT HEDGE_YEAR, HEDGE_MONTH, HEDGE_MATURITY_YEAR AS FORWARD_SETTLE_YEAR, HEDGE_MATURITY_MONTH AS FORWARD_SETTLE_MONTH,
                              CONCAT(CONCAT(:IP_LAYER1_MIN_PER, '_'), :IP_LAYER1_MAX_PER) AS LAYER1_PERCENTAGE,
                              CONCAT(CONCAT(:IP_LAYER2_MIN_PER, '_'), :IP_LAYER2_MAX_PER) AS LAYER2_PERCENTAGE,  LAYER_SEQUENCE, FORECAST,
                              MIN_VALUE, MAX_VALUE, BPL AS BPL_PER, FORECAST_COMP AS FORECAST_COMP_PER, MKT_VAL_RATIO AS MKT_VAL_RATIO_PER,
                                ROUND(( BPL + FORECAST_COMP + MKT_VAL_RATIO ) / 3, 1) AS PROPOSED_PERCENT,
                              ((( ROUND(( BPL + FORECAST_COMP + MKT_VAL_RATIO ) / 3, 1) ) / 100 ) * FORECAST ) AS PROPOSED_VALUE
                            FROM :T_OUT_CALC;

        ELSEIF :IP_MODEL = 'A' THEN

            T_OUT_CALC = SELECT DISTINCT A.*, B.FORECASTED AS FORECAST,
                            CASE WHEN A.LAYER_SEQUENCE = 'L1' THEN ( :IP_LAYER1_MIN_PER / 100 ) * B.FORECASTED
                                 WHEN A.LAYER_SEQUENCE = 'L2' THEN ( :IP_LAYER2_MIN_PER / 100 ) * B.FORECASTED   
                            END AS MIN_VALUE,
                            CASE WHEN A.LAYER_SEQUENCE = 'L1' THEN ( :IP_LAYER1_MAX_PER / 100 ) * B.FORECASTED
                                 WHEN A.LAYER_SEQUENCE = 'L2' THEN ( :IP_LAYER2_MAX_PER / 100 ) * B.FORECASTED   
                            END AS MAX_VALUE, 
                            CASE WHEN A.LAYER_SEQUENCE = 'L1' AND ( C.BEST_LAYER = 'L1' OR C.BEST_LAYER = 'L1_L2')  THEN :IP_LAYER1_MAX_PER
                                 WHEN A.LAYER_SEQUENCE = 'L1' AND C.BEST_LAYER = 'L2' THEN :IP_LAYER1_MIN_PER
                                 WHEN A.LAYER_SEQUENCE = 'L2' AND ( C.BEST_LAYER = 'L2' OR C.BEST_LAYER = 'L1_L2') THEN :IP_LAYER2_MAX_PER
                                 WHEN A.LAYER_SEQUENCE = 'L2' AND C.BEST_LAYER = 'L1' THEN :IP_LAYER2_MIN_PER
                            END AS BPL,
                            CASE WHEN B.FORECASTED <= B.ACTUAL AND A.LAYER_SEQUENCE = 'L1' THEN :IP_LAYER1_MAX_PER
                                 WHEN B.FORECASTED <= B.ACTUAL AND A.LAYER_SEQUENCE = 'L2' THEN :IP_LAYER2_MAX_PER
                                 WHEN B.FORECASTED > B.ACTUAL AND A.LAYER_SEQUENCE = 'L1' THEN :IP_LAYER1_MIN_PER
                                 WHEN B.FORECASTED > B.ACTUAL AND A.LAYER_SEQUENCE = 'L2' THEN :IP_LAYER1_MIN_PER
                            END AS FORECAST_COMP,
                            CASE WHEN E.AVG_SPOT_RATE <= D.AVG_SPOT_RATE AND A.LAYER_SEQUENCE = 'L1' THEN :IP_LAYER1_MIN_PER
                                 WHEN E.AVG_SPOT_RATE <= D.AVG_SPOT_RATE AND A.LAYER_SEQUENCE = 'L2' THEN :IP_LAYER2_MIN_PER
                                 WHEN E.AVG_SPOT_RATE > D.AVG_SPOT_RATE AND A.LAYER_SEQUENCE = 'L1' THEN :IP_LAYER1_MAX_PER
                                 WHEN E.AVG_SPOT_RATE > D.AVG_SPOT_RATE AND A.LAYER_SEQUENCE = 'L2' THEN :IP_LAYER2_MAX_PER
                                 WHEN A.LAYER_SEQUENCE = 'L1' THEN :IP_LAYER1_MIN_PER
                                 WHEN A.LAYER_SEQUENCE = 'L2' THEN :IP_LAYER2_MIN_PER
                            END AS MKT_VAL_RATIO
                            FROM :T_DATA AS A
                            LEFT OUTER JOIN "TF_EXPOSURE_FORECAST_ACTUAL"(:IP_EXP_CURRENCY) AS B
                            ON A.HEDGE_MATURITY_YEAR = B.PLANNING_YEAR
                            AND A.HEDGE_MATURITY_MONTH = B.PERIOD
                            LEFT OUTER JOIN :T_BEST_LAYER AS C
                            ON A.LAYER_KEY = C.LAYER_KEY
                            LEFT OUTER JOIN T_SPOT_RATES_FORECAST AS D
                            ON A.HEDGE_MATURITY_YEAR = D.YEAR
                            AND A.HEDGE_MATURITY_MONTH = D.MONTH
                            AND D.TENOR = 0
                            LEFT OUTER JOIN T_SPOT_RATES AS E
                            ON A.HEDGE_YEAR = E.YEAR
                            AND A.HEDGE_MONTH = E.MONTH
                            AND A.HEDGE_MATURITY_MONTH = D.TENOR;  

            T_OUTPUT = SELECT HEDGE_YEAR, HEDGE_MONTH, HEDGE_MATURITY_YEAR AS FORWARD_SETTLE_YEAR, HEDGE_MATURITY_MONTH AS FORWARD_SETTLE_MONTH, 
                              CONCAT(CONCAT(:IP_LAYER1_MIN_PER, '_'), :IP_LAYER1_MAX_PER) AS LAYER1_PERCENTAGE,
                              CONCAT(CONCAT(:IP_LAYER2_MIN_PER, '_'), :IP_LAYER2_MAX_PER) AS LAYER2_PERCENTAGE,  LAYER_SEQUENCE, FORECAST,
                              MIN_VALUE, MAX_VALUE, BPL AS BPL_PER, FORECAST_COMP AS FORECAST_COMP_PER, MKT_VAL_RATIO AS MKT_VAL_RATIO_PER,
                                ROUND(( BPL + FORECAST_COMP + MKT_VAL_RATIO ) / 3, 1) AS PROPOSED_PERCENT,
                              (( ROUND(( BPL + FORECAST_COMP + MKT_VAL_RATIO ) / 3, 1) / 100 ) * FORECAST ) AS PROPOSED_VALUE
                            FROM :T_OUT_CALC;

        END IF;

    RETURN SELECT * FROM :T_OUTPUT;
END;