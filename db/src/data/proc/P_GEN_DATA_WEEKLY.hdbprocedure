PROCEDURE "P_GEN_DATA_WEEKLY"( OUT OT_OUT "T_HISTORICAL_CURVES" )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/

   DECLARE V_REC_COUNT INTEGER;
	DECLARE V_DATE DATE;
	DECLARE V_WEEKDAY INTEGER;
	DECLARE V_WEEKEND_DAY INTEGER;
	DECLARE V_END_DATE DATE;
	DECLARE T_OUT "T_HISTORICAL_CURVES";
	DECLARE T_TEMP "T_HISTORICAL_CURVES";
	DECLARE T_DATA_SUBSET "T_HISTORICAL_CURVES";
	DECLARE V_DEL_INDEX_END INTEGER;
	
	T_DATA = SELECT * FROM "T_HISTORICAL_CURVES" ORDER BY DATE;
	V_REC_COUNT = RECORD_COUNT(:T_DATA);
	
	WHILE :V_REC_COUNT != 0 DO
		
		V_DATE = :T_DATA.DATE[1];
		SELECT WEEKDAY (:V_DATE) + 1 INTO V_WEEKDAY FROM "SY_DUMMY";
		V_WEEKEND_DAY = 7 - :V_WEEKDAY;
		SELECT ADD_DAYS(:V_DATE, :V_WEEKEND_DAY) INTO V_END_DATE FROM "SY_DUMMY";
		
		T_DATA_SUBSET = SELECT * FROM :T_DATA WHERE DATE BETWEEN :V_DATE AND :V_END_DATE;
		
		T_TEMP = SELECT :V_DATE AS DATE,
					AVG("SPOT") AS SPOT,
					AVG("OVERNIGHT") AS OVERNIGHT,
					AVG("WEEK") AS WEEK,
					AVG("ONE_M") AS ONE_M,
					AVG("TWO_M") AS TWO_M,
					AVG("THREE_M") AS THREE_M,
					AVG("FOUR_M") AS FOUR_M,
					AVG("FIVE_M") AS FIVE_M,
					AVG("SIX_M") AS SIX_M,
					AVG("SEVEN_M") AS SEVEN_M,
					AVG("EIGHT_M") AS EIGHT_M,
					AVG("NINE_M") AS NINE_M,
					AVG("TEN_M") AS TEN_M,
					AVG("ELEVEN_M") AS ELEVEN_M,
					AVG("ONE_Y") AS ONE_Y,
					AVG("EIGHTEEN_M") AS EIGHTEEN_M,
					AVG("TWO_Y") AS TWO_Y,
					AVG("THREE_Y") AS THREE_Y,
					AVG("FOUR_Y") AS FOUR_Y,
					AVG("FIVE_Y") AS FIVE_Y
					FROM :T_DATA_SUBSET;
					
		:T_OUT.INSERT(:T_TEMP);
		
		V_DEL_INDEX_END = RECORD_COUNT(:T_DATA_SUBSET);
		
		:T_DATA.DELETE(1..:V_DEL_INDEX_END);
		
		V_REC_COUNT = RECORD_COUNT(:T_DATA);
		
	END WHILE;
	
    OT_OUT = SELECT * FROM :T_OUT;
    INSERT INTO "T_HISTORICAL_CURVES_WEEK"
    SELECT * FROM :T_OUT;
END