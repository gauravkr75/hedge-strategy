PROCEDURE "P_GENERATE_OVERLAP"( )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
    DECLARE T_MONTH_OUT "TT_MONTH_LAYERS";
    DECLARE T_MONTH_CODE_MAP "TT_MONTH_CODE_MAP";
    DECLARE I INTEGER;
    DECLARE V_FIRST_MONTH_START_NUM INTEGER;
    DECLARE V_FIRST_MONTH_START_CHAR NVARCHAR(02);
    DECLARE V_FIRST_MONTH_END_NUM INTEGER;
    DECLARE V_FIRST_MONTH_END_CHAR NVARCHAR(02);
    DECLARE V_SECOND_MONTH_START_NUM INTEGER;
    DECLARE V_SECOND_MONTH_START_CHAR NVARCHAR(02);
    DECLARE V_SECOND_MONTH_END_NUM INTEGER;
    DECLARE V_SECOND_MONTH_END_CHAR NVARCHAR(02);

    DECLARE T_OUT_TEMP "T_TWO_LAYER_OVERLAP_COMBO";
    DECLARE T_OUT "T_TWO_LAYER_OVERLAP_COMBO";

    CALL "P_GENERATE_COMBINATION_TEST"( IV_DURATION => 12, IV_NUM_LAYERS => 2, OT_MONTH_OUT => :T_MONTH_OUT, OT_MONTH_CODE_MAP=> :T_MONTH_CODE_MAP );

    T_MONTH = SELECT B.MONTH_NUM AS FIRST_MONTH_START_NUM, B.MONTH_NUM_CHAR AS FIRST_MONTH_START_CHAR,
                C.MONTH_NUM AS FIRST_MONTH_END_NUM, C.MONTH_NUM_CHAR AS FIRST_MONTH_END_CHAR,
                D.MONTH_NUM AS SECOND_MONTH_START_NUM, D.MONTH_NUM_CHAR AS SECOND_MONTH_START_CHAR,
                E.MONTH_NUM AS SECOND_MONTH_END_NUM, E.MONTH_NUM_CHAR AS SECOND_MONTH_END_CHAR
                FROM :T_MONTH_OUT AS A
                LEFT OUTER JOIN "TF_MONTH_INFO"() AS B
                ON A."FIRST_MONTH_START" = B.MONTH
                LEFT OUTER JOIN "TF_MONTH_INFO"() AS C
                ON A."FIRST_MONTH_END" = C.MONTH
                LEFT OUTER JOIN "TF_MONTH_INFO"() AS D
                ON A."SECOND_MONTH_START" = D.MONTH
                LEFT OUTER JOIN "TF_MONTH_INFO"() AS E
                ON A."SECOND_MONTH_END" = E.MONTH ;
    
    FOR I IN 1..RECORD_COUNT(:T_MONTH) DO

        V_FIRST_MONTH_START_NUM = :T_MONTH.FIRST_MONTH_START_NUM[:I];
        V_FIRST_MONTH_START_CHAR = :T_MONTH.FIRST_MONTH_START_CHAR[:I];
        V_FIRST_MONTH_END_NUM = :T_MONTH.FIRST_MONTH_END_NUM[:I];
        V_FIRST_MONTH_END_CHAR = :T_MONTH.FIRST_MONTH_END_CHAR[:I];
        V_SECOND_MONTH_START_NUM = :T_MONTH.SECOND_MONTH_START_NUM[:I];
        V_SECOND_MONTH_START_CHAR = :T_MONTH.SECOND_MONTH_START_CHAR[:I];
        V_SECOND_MONTH_END_NUM = :T_MONTH.SECOND_MONTH_END_NUM[:I];
        V_SECOND_MONTH_END_CHAR = :T_MONTH.SECOND_MONTH_END_CHAR[:I];

        T_OUT_TEMP = SELECT 2 AS LAYER,
                        CONCAT(CONCAT(( :V_FIRST_MONTH_END_NUM - :V_FIRST_MONTH_START_NUM + 1 ), '_'), :V_SECOND_MONTH_END_NUM - :V_SECOND_MONTH_START_NUM + 1 ) AS LAYER_KEY,
                        CONCAT(CONCAT(:V_FIRST_MONTH_START_CHAR, '_'), :V_SECOND_MONTH_END_CHAR) AS BLOCK_KEY,
                        CONCAT(CONCAT(:V_FIRST_MONTH_START_CHAR, '_'), :V_FIRST_MONTH_END_CHAR) AS RECORD_KEY,
                        :V_FIRST_MONTH_START_NUM AS START_MONTH,
                        :V_FIRST_MONTH_END_NUM AS END_MONTH,
                        ( ABS(:V_FIRST_MONTH_END_NUM - :V_FIRST_MONTH_START_NUM) + 1 ) AS DURATION
                    FROM "SY_DUMMY"
                        UNION
                    SELECT 2 AS LAYER,
                        CONCAT(CONCAT(( :V_FIRST_MONTH_END_NUM - :V_FIRST_MONTH_START_NUM + 1 ), '_'), :V_SECOND_MONTH_END_NUM - :V_SECOND_MONTH_START_NUM + 1 ) AS LAYER_KEY,
                        CONCAT(CONCAT(:V_FIRST_MONTH_START_CHAR, '_'), :V_SECOND_MONTH_END_CHAR) AS BLOCK_KEY,
                        CONCAT(CONCAT(:V_SECOND_MONTH_START_CHAR, '_'), :V_SECOND_MONTH_END_CHAR) AS RECORD_KEY,
                        :V_SECOND_MONTH_START_NUM AS START_MONTH,
                        :V_SECOND_MONTH_END_NUM AS END_MONTH,
                        ( ABS(:V_SECOND_MONTH_START_NUM - :V_SECOND_MONTH_END_NUM) + 1 ) AS DURATION
                    FROM "SY_DUMMY";   

        :T_OUT.INSERT(:T_OUT_TEMP);
    END FOR;

    INSERT INTO "T_TWO_LAYER_OVERLAP_COMBO"
    SELECT * FROM :T_OUT;

END